//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Text.Json.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
namespace Core.Reflection
{

    public class ObjectMemoryFootprintHelper
    {
        private static readonly int PointerSize =
        Environment.Is64BitOperatingSystem ? sizeof(long) : sizeof(int);
        // The core functionality. Recurrently calls itself when an object appears to have fields 
        // until all fields have been  visited, or were "visited" (calculated) already.
        public static long GetSizeInBytes(object obj)
        {
            byte[] bytes;
            using (var _MemoryStream = new MemoryStream())
            {
                throw new NotImplementedException();
                /*IFormatter _BinaryFormatter = new BinaryFormatter();
                _BinaryFormatter.Serialize(_MemoryStream, obj);
                bytes = _MemoryStream.ToArray();*/
            }
            return bytes.Length;
            return GetSizeInBytes(obj, new HashSet<object>());
        }
        private static long GetSizeInBytes(object obj, HashSet<object> references)
        {
            if (obj == null) return sizeof(int);
            var type = obj.GetType();

            if (type.IsPrimitive)
            {
                switch (Type.GetTypeCode(type))
                {
                    case TypeCode.Boolean:
                    case TypeCode.Byte:
                    case TypeCode.SByte:
                        return sizeof(byte);
                    case TypeCode.Char:
                        return sizeof(char);
                    case TypeCode.Single:
                        return sizeof(float);
                    case TypeCode.Double:
                        return sizeof(double);
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                        return sizeof(Int16);
                    case TypeCode.Int32:
                    case TypeCode.UInt32:
                        return sizeof(Int32);
                    case TypeCode.Int64:
                    case TypeCode.UInt64:
                    default:
                        return sizeof(Int64);
                }
            }
            else if (obj is decimal)
            {
                return sizeof(decimal);
            }
            else if (obj is string)
            {
                return sizeof(char) * obj.ToString().Length;
            }
            else if (type.IsEnum)
            {
                return sizeof(int);
            }
            else if (type.IsArray)
            {
                long size = PointerSize;
                var casted = (IEnumerable)obj;
                foreach (var item in casted)
                {
                    size += GetSizeInBytes(item, references);
                }
                return size;
            }
            else if (obj is System.Reflection.Pointer)
            {
                return PointerSize;
            }
            else
            {
                long size = 0;
                var t = type;
                while (t != null)
                {
                    size += PointerSize;
                    var fields = t.GetFields(BindingFlags.Instance | BindingFlags.Public |
                            BindingFlags.NonPublic | BindingFlags.DeclaredOnly);
                    foreach (var field in fields)
                    {
                        var tempVal = field.GetValue(obj);
                        if (!references.Contains(tempVal))
                        {
                            references.Add(tempVal);
                            size += GetSizeInBytes(tempVal, references);
                        }
                    }
                    t = t.BaseType;
                }
                return size;
            }
        }
    }
}
