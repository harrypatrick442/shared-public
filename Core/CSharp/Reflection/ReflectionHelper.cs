//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Core.Reflection
{

    public static class ReflectionHelper
    {
        public static Type[] GetTypesInNamespace(Assembly assembly, string nameSpace)
        {
            return
              assembly.GetTypes()
                      .Where(t =>
                      {
                          return t.Namespace!=null&&(t.Namespace.Length >= nameSpace.Length)
                          ? t.Namespace.Substring(0, nameSpace.Length) ==nameSpace
                          :false;
                      })
                      .ToArray();
        }
        /// <summary>
        /// Gets all public properties of the specified type from the given object.
        /// </summary>
        /// <typeparam name="T">The type of properties to retrieve.</typeparam>
        /// <param name="obj">The object to inspect.</param>
        /// <returns>A list of PropertyInfo objects representing the matching properties.</returns>
        public static List<PropertyInfo> GetPublicPropertiesOfType<T>(object obj)
        {
            if (obj == null) throw new ArgumentNullException(nameof(obj));

            // Get the type of the object
            Type objType = obj.GetType();

            // Find all public properties of the specified type
            return objType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                          .Where(prop => prop.PropertyType == typeof(T))
                          .ToList();
        }
        public static List<PropertyInfo> GetPublicPropertiesAssignableFromType<T>(object obj)
        {
            if (obj == null) throw new ArgumentNullException(nameof(obj));

            // Get the type of the object
            Type objType = obj.GetType();

            // Find all public properties assignable from the specified type
            return objType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                          .Where(prop => typeof(T).IsAssignableFrom(prop.PropertyType))
                          .ToList();
        }
    }
}